buildscript {
    apply from: 'https://raw.githubusercontent.com/comodal/gradle-conf/master/plugins.gradle'
    dependencies {
        classpath "$axion"
        classpath "$bintray"
    }
}

ext {
    desc = 'Distributed systems locks backed by Redis.'
}
apply from: 'https://raw.githubusercontent.com/comodal/gradle-conf/master/java/java.gradle'
apply from: 'https://raw.githubusercontent.com/comodal/gradle-conf/master/axion.gradle'
apply from: 'https://raw.githubusercontent.com/comodal/gradle-conf/master/comodal.gradle'
apply from: 'https://raw.githubusercontent.com/comodal/gradle-conf/master/java/bintray-maven.gradle'
apply from: 'https://raw.githubusercontent.com/comodal/gradle-conf/master/java/checks.gradle'
apply plugin: 'findbugs'

dependencies {
    compile 'com.fabahaba:jedipus:+'
}

sourceSets {
    main {
        java {
            srcDir 'src/core/java'
            srcDir 'src/modules/java'
            srcDir 'src/lua/java'
        }
        resources {
            srcDir 'src/lua/resources'
        }
    }
    test {
        java {
            srcDir 'src/unit/java'
            srcDir 'src/integ/java'
        }
        resources {
            srcDir 'src/unit/resources'
            srcDir 'src/integ/resources'
        }
    }
}

test {
    outputs.upToDateWhen { false }
    testLogging {
        events "failed", "standardOut", "standardError"
        showExceptions true
        showStackTraces true
        exceptionFormat "full"
    }
    systemProperty 'redislocks.redis.port', '9736'
}

task startRedis(type: Exec) {
    commandLine 'docker-compose', 'up', '-d'
}

task rmRedis(type: Exec) {
    commandLine 'docker-compose', 'down'
}

task getRedisModule() {
    OutputStream moduleHeaderFile = new File('./redis/redismodule.h').newOutputStream()
    moduleHeaderFile << new URL('https://raw.githubusercontent.com/antirez/redis/unstable/src/redismodule.h').openStream()
    moduleHeaderFile.close()
}

task compileIntegModules(type: Exec) {
    String dir = System.getProperty("user.dir");
    commandLine 'docker', 'run', '--rm', '-v', "$dir/redis/:/tmp", 'comodal/alpine-gcc-make:latest', '/bin/sh', '-c', 'make -B -C /tmp/modules'
}

task makeClean(type: Exec) {
    String dir = System.getProperty("user.dir");
    commandLine 'docker', 'run', '--rm', '-v', "$dir/redis/:/tmp", 'comodal/alpine-gcc-make:latest', '/bin/sh', '-c', 'make -C /tmp/modules clean'
}

compileIntegModules.dependsOn getRedisModule
startRedis.dependsOn compileIntegModules
test.dependsOn startRedis
test.finalizedBy rmRedis
rmRedis.finalizedBy makeClean

findbugs {
    toolVersion = "+"
    effort = "max"
    reportLevel = "low"
    ignoreFailures = false
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

gradle.addListener(new TestEventLogger())

class TestEventLogger implements org.gradle.api.tasks.testing.TestListener {

    void beforeSuite(TestDescriptor suite) {
        if (suite.getClassName() != null) {
            println 'Running ' + suite.getClassName() + ' test suite.'
        }
    }

    void afterSuite(TestDescriptor suite, TestResult result) {
    }

    void beforeTest(TestDescriptor test) {
        println '\n' + test.getName() + ' STARTED @ ' + new Date().toTimestamp()
    }

    void afterTest(TestDescriptor test, TestResult result) {
        println test.getName() + ' ' + result.getResultType() + ' in ' + (result.getEndTime() - result.getStartTime()) + 'ms.'
    }
}
